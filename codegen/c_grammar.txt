=== LEXICAL GRAMMAR ===

token:
	keyword | identifier | constant | string_literal | punctuator
pp_token:
	header_name | identifier | pp_number | character_constant | string_literal | punctuator | universal_character_name | non_whitespace_character
keyword:
	"alignas	alignof	auto	bool
	break	case	char	const
	constexpr	continue	default	do
	double	else	enum	extern
	false	float	for	goto
	if	inline	int	long
	nullptr	register	restrict	return
	short	signed	sizeof	static
	static_assert	struct	switch	thread_local
	true	typedef	typeof	typeof_unqual
	union	unsigned	void	volatile
	while	_Atomic	_BitInt	_Complex
	_Decimal128	_Decimal32	_Decimal64	_Generic
	_Imaginary	_Noreturn"
identifier:
	nondigit (nondigit | digit)*
nondigit:
	[_a-zA-Z]
digit:
	[0-9]
universal_character_name:
	"\u" hex_digit{4}
	"\U" hex_digit{8}
constant:
	integer_constant | floating_constant | enumeration_constant | character_constant | predefined_constant
integer_constant:
	decimal_constant integer_suffix?
	octal_constant integer_suffix?
	hex_constant integer_suffix?
	binary_constant integer_suffix?
decimal_constant:
	nonzero_digit ("'"? digit)*
octal_constant:
	"0" ("'"? octal_digit)*
hex_constant:
	"0" [xX] hex_digit_sequence
hex_digit_sequence:
	hex_digit ("'"? hex_digit)*
binary_constant:
	"0" [bB] binary_digit ("'"? binary_digit)*
nonzero_digit:
	[1-9]
octal_digit:
	[0-7]
hex_digit:
	[0-9A-Fa-f]
binary_digit:
	[01]
integer_suffix:
	[uU] ("ll" | "LL")
	[uU] [lL]
	[uU] ("wb" | "WB")?
	("ll" | "LL") [uU]?
	[lL] [uU]?
	("wb" | "WB") [uU]?
floating_constant:
	decimal_floating_constant | hex_floating_constant
decimal_floating_constant:
	fractional_constant exponent_part? floating_suffix?
	digit_sequence exponent_part floating_suffix?
hex_floating_constant:
	"0" [xX] hex_fractional_constant binary_exponent_part floating_suffix?
	"0" [xX] hex_digit_sequence binary_exponent_part floating_suffix?
fractional_constant:
	digit_sequence? "." digit_sequence
	digit_sequence "."
exponent_part:
	[eE] [+-]? digit_sequence
digit_sequence:
	[0-9] ("'"? [0-9])*
hex_fractional_constant:
	hex_digit_sequence? "." hex_digit_sequence
	hex_digit_sequence "."
binary_exponent_part:
	[pP] [+-]? digit_sequence
floating_suffix:
	[flFL] | "df" | "dd" | "dl" | "DF" | "DD" | "DL"
enumeration_constant:
	identifier
character_constant:
	([uUL] | "u8")? "'" c_char+ "'"
c_char:
	[^'\\\n] | escape_sequence
escape_sequence:
	simple_escape_sequence | octal_escape_sequence | hex_escape_sequence | universal_character_name
simple_escape_sequence:
	"\\'" | "\\\"" | "\\?" | "\\\\" | "\\a" | "\\b" | "\\f" | "\\n" | "\\r" | "\\t" | "\\v"
octal_escape_sequence:
	"\\" [0-7]{1,3}
hex_escape_sequence:
	"\\x" [0-9a-fA-F]+
predefined_constant:
	"false" | "true" | "nullptr"
string_literal:
	([uUL] | "u8") "\"" s_char* "\""
s_char:
	[^"\\\n] | escape_sequence
punctuator:
	"[ ] ( ) { } . ->
	++ -- & * + - ~ !
	/ % << >> < > <= >= == != ^ | && ||
	? : :: ; ...
	= *= /= %= += -= <<= >>= &= ^= |=
	, # ## <: :> <% %> %: %:%:"
header_name:
	"<" h_char+ ">"
	"\"" q_char+ "\""
h_char:
	[^>\n]
q_char:
	[^"\n]
pp_number:
	"."? [0-9] (("'"? (digit | nondigit)) | ([eEpP] [+-]) | ".")

=== PHRASE STRUCTURE GRAMMAR ===

primary_expression:
	identifier | constant | string_literal | ("(" expression ")") | generic_selection
generic_selection:
	"_Generic" "(" assignment_expression "," generic_assoc ("," generic_assoc)* ")"
generic_assoc:
		(type_name | "default") ":" assignment_expression
postfix_expression:
	primary_expression (("[" expression "]") | ("(" (argument_expression ("," argument_expression)*)? ")") | (("." | "->") identifier) | "++" | "--")*
	compound_literal
compound_literal:
	"(" storage_class_specifier* type_name ")" braced_initializer
unary_expression:
	("++" | "--" | [&*+~!-] | "sizeof")* postfix_expression
	"sizeof" "(" type_name ")"
	"alignof" "(" type_name ")"
cast_expression:
	("(" type_name ")")* unary_expression
multiplicative_expression:
	cast_expression ([*/%] cast_expression)*
additive_expression:
	multiplicative_expression ([+-] multiplicative_expression)*
shift_expression:
	additive_expression (("<<" | ">>") additive_expression)*
relational_expression:
	shift_expression (([<>] | "<=" | ">=") shift_expression)*
equality_expression:
	relational_expression (("==" | "!=") relational_expression)*
and_expression:
	equality_expression ("&" equality_expression)*
xor_expression:
	and_expression ("^" and_expression)*
or_expression:
	xor_expression ("|" xor_expression)*
logical_and_expression:
	or_expression ("&&" or_expression)*
logical_or_expression:
	logical_and_expression ("||" logical_and_expression)*
conditional_expression:
	logical_or_expression (("?" expression ":")+ logical_or_expression)?
assignment_expression:
	(unary_expression assignment_operator)* conditional_expression
assignment_operator:
	"= *= /= %= += -= <<= >>= &= ^= |="
expression:
	(assignment_expression ",")* assignment_expression
constant_expression:
	conditional_expression
declaration:
	declaration_specifier+ ("[" "[" attribute_list "]" "]")* (init_declarator ("," init_declarator)*)? ";"
	("[" "[" attribute_list "]" "]")+ declaration_specifier+ ("[" "[" attribute_list "]" "]")* init_declarator ("," init_declarator)* ";"
	static_assert_declaration
	("[" "[" attribute_list "]" "]")+ ";"
declaration_specifier:
	storage_class_specifier | type_specifier_qualifier | function_specifier
init_declarator:
	declarator ("=" initializer)?
storage_class_specifier:
	"auto constexpr extern register static thread_local typedef"
type_specifier:
	"void char short int long float double signed unsigned bool _Complex _Decimal32 _Decimal64 _Decimal128"
	"_BigInt" "(" constant_expression ")"
	atomic_type_specifier | struct_or_union_specifier | enum_specifier | typedef_name | typeof_specifier
struct_or_union_specifier:
	struct_or_union ("[" "[" attribute_list "]" "]")* ((identifier? "{" member_declaration+ "}") | identifier)
struct_or_union:
	"struct union"
member_declaration:
	("[" "[" attribute_list "]" "]")* type_specifier_qualifier+ ("[" "[" attribute_list "]" "]")* (member_declarator ("," member_declarator)*)?
type_specifier_qualifier:
	type_specifier | type_qualifier | alignment_specifier
member_declarator:
	declarator? ":" constant_expression
	declarator
enum_specifier:
	"enum" ("[" "[" attribute_list "]" "]")* identifier? enum_type_specifier? "{" enumerator ("," enumerator)* ","? "}"
	"enum" identifier enum_type_specifier?
enumerator:
	enumeration_constant ("[" "[" attribute_list "]" "]")* ("=" constant_expression)?
enum_type_specifier:
	":" type_specifier_qualifier+ ("[" "[" attribute_list "]" "]")*
atomic_type_specifier:
	"_Atomic" "(" type_name ")"
typeof_specifier:
	"typeof" "(" (expression | type_name) ")"
	"typeof_unqual" "(" (expression | type_name) ")"
type_qualifier:
	"const restrict volatile _Atomic"
function_specifier:
	"inline _Noreturn"
alignment_specifier:
	"alignas" "(" (typename | constant_expression) ")"
declarator:
	pointer? direct_declarator
direct_declarator:
	(identifier | array_declarator | function_declarator) ("[" "[" attribute_list "]" "]")*
	"(" declarator ")"
array_declarator:
	direct_declarator "[" type_qualifier* assignment_expression? "]"
	direct_declarator "[" "static" type_qualifier* assignment_expression "]"
	direct_declarator "[" type_qualifier+ "static" assignment_expression "]"
	direct_declarator "[" type_qualifier* "*" "]"
function_declarator:
	direct_declarator "(" ((parameter_declaration ("," parameter_declaration)* ("," "...")?) | "...") ")"
pointer:
	("*" ("[" "[" attribute_list "]" "]")* type_qualifier*)+
parameter_declaration:
	("[" "[" attribute_list "]" "]")* declaration_specifier+ (declarator | abstract_declarator?)
type_name:
	type_specifier_qualifier+ ("[" "[" attribute_list "]" "]")* abstract_declarator?
abstract_declarator:
	pointer? direct_abstract_declarator
	pointer
direct_abstract_declarator:
	"(" abstract_declarator ")"
	array_abstract_declarator ("[" "[" attribute_list "]" "]")*
	function_abstract_declarator ("[" "[" attribute_list "]" "]")*
array_abstract_declarator:
	direct_abstract_declarator? "[" type_qualifier* assignment_expression? "]"
	direct_abstract_declarator? "[" "static" type_qualifier* assignment_expression "]"
	direct_abstract_declarator? "[" type_qualifier+ "static" assignment_expression "]"
	direct_abstract_declarator? "[" "*" "]"
function_abstract_declarator:
	direct_abstract_declarator? "(" ((parameter_declaration ("," parameter_declaration)* ("," "...")?) | "...")? ")"
typedef_name:
	identifier
braced_initializer:
	"{" (designation? initializer ("," designation? initializer)* ","?)? "}"
initializer:
	assignment_expression | braced_initializer
designation:
	(("[" constant_expression "]") | ("." identifier))+ "="
static_assert_declaration:
	"static_assert" "(" constant_expression ("," string_literal)? ")" ";"
attribute_list:
	attribute? ("," attribute?)*
attribute:
	(identifier "::")? identifier ("(" balanced_token* ")")?
balanced_token:
	"(" balanced_token* ")"
	"[" balanced_token* "]"
	"{" balanced_token* "}"
	[^()\[\]{}]
statement:
	label* unlabeled_statement
unlabeled_statement:
	expression_statement
	("[" "[" attribute_list "]" "]")* (primary_block | jump_statement)
primary_block:
	compound_statement | selection_statement | iteration_statement
secondary_block:
	statement
label:
	("[" "[" attribute_list "]" "]")* (identifier | ("case" constant_expression) | "default") ":"
compound_statement:
	"{" (declaration | unlabeled_statement | label)* "}"
expression_statement:
	("[" "[" attribute_list "]" "]")+ expression ";"
	expression? ";"
selection_statement:
	"if" "(" expression ")" secondary_block ("else" secondary_block)?
	"switch" "(" expression ")" secondary_block
iteration_statement:
	"while" "(" expression ")" secondary_block
	"do" secondary_block "while" "(" expression ")" ";"
	"for" "(" ((expression? ";") | declaration) expression? ";" expression ")" secondary_block
jump_statement:
	"goto" identifier ";"
	"continue" ";"
	"break" ";"
	"return" expression? ";"



translation_unit:
	(function_definition | declaration)+
function_definition:
	("[" "[" attribute_list "]" "]")* declaration_specifier+ declarator compound_statement



preprocessing_file:
	group_part*
group_part:
	if_section | control_line | text_line | ("#" non_directive)
if_section:
	if_group elif_group* else_group? "#" "endif" new_line
if_group:
	"#" "if" constant_expression new_line group_part*
	"#" ("ifdef" | "ifndef") identifier new_line group_part*
elif_group:
	"#" "elif" constant_expression new_line group_part*
	"#" ("elifdef" | "elifndef") identifier new_line group_part*
else_group:
	"#" "else" new_line group_part*
control_line:
	"#" ("include" | "embed") pp_token+ new_line
	"#" "define" identifier pp_token* new_line
	"#" "define" identifier-"(" ("..." | (identifier ("," identifier)* ("," "...")?)?) ")" pp_token* new_line
	"#" "undef" identifier new_line
	"#" "line" pp_tokens new_line
	"#" ("error" | "warning" | "pragma") pp_token*
	"#" new_line
text_line:
	pp_token* new_line
non_directive:
	pp_token+ new_line
new_line:
	"\n"
pp_parameter:
	(identifier "::")? identifier ("(" pp_balanced_token* ")")?
pp_balanced_token:
	"(" pp_balanced_token* ")"
	"[" pp_balanced_token* "]"
	"{" pp_balanced_token* "}"
	[^()\[\]{}]
defined_macro_expression:
	"defined" (("(" identifier ")") | identifier)
header_name_tokens:
	string_literal | ("<" [^>]+ ">")
has_include_expression:
	"__has_include" "(" header_name | header_name_tokens ")"
has_embed_expression:
	"__has_embed" "(" ((header_name pp_parameter*) | (header_name_tokens pp_balanced_token*)) ")"
has_c_attribute_expression:
	"__has_c_attribute" "(" pp_token+ ")"
va_opt_replacement:
	"__VA_OPT__" "(" pp_token* ")"
standard_pragma:
	"#" "pragma" "STDC" (("FP_CONTRACT" on_off_switch) | ("FENV_ACCESS" on_off_switch) | ("FENV_DEC_ROUND" dec_direction) | ("FENV_ROUND" direction) | ("CX_LIMITED_RANGE" on_off_switch))
on_off_switch:
	"ON OFF DEFAULT"
direction:
	"FE_DOWNWARD FE_TONEAREST FE_TONEARESTFROMZERO FE_TOWARDZERO FE_UPWARD FE_DYNAMIC"
dec_direction:
	"FE_DEC_DOWNWARD FE_DEC_TONEAREST FE_DEC_TONEARESTFROMZERO FE_DEC_TOWARDZERO FE_DEC_UPWARD FE_DEC_DYNAMIC"

